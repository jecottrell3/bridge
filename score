#! /bin/python3
from __future__ import print_function

import sys, os, re

"""Parse Scoring String: #S+#VD

Example: 3N+1NR		3 Notrump Making 4, Non-Vulnerable, ReDoubled
Example: 4S-1VU		4 Spades, Down 1, Vulnerable, Undoubled
Example: 2D=6ND		2 Diamonds, Six Tricks. Down Two

The first two characters are the Contract. The next can be + or -, meaning
Overtricks or Undertricks. Use +0 for making bid Exactly.

Note that V and D (or R for Redouble) are Flags; N or U never appear.

The Contract may be Omitted when Scoring Undertricks.
"""

debug = len(sys.argv) > 1

def	down(bid, undr, vul, dbl):

	out = 'Bid: %s, ' % bid if bid else ''
	out += 'Down %d, ' % undr
	out +=  'NV'[vul]
	out += 'UDR'[dbl]
	
	# undoubled tricks are 50,100
	#   doubled tricks follow two schedules
	if not dbl:	ouch = undr * (100 if vul else 50)
	elif vul:	ouch = undr * 300 - 100	# 200, 500, 800...
	elif undr < 3:	ouch = undr * 200 - 100 # 100, 300
	else:		ouch = undr * 300 - 400 # 500, 800...

	if dbl == 2:		ouch *= 2	# Redouble All Penalties
	out += ' = %d' % -ouch
	if debug:	print(out)
	return -ouch

def	made(bid, over, vul, dbl):

	# part score, game score, insult

	out  = 'Bid: %s, ' % bid
	out += 'Over %d, ' % over
	out +=  'NV'[vul]
	out += 'UDR'[dbl]

	suit = bid[1]
	bump = 10 if  suit == 'n' else 0
	base = 20 if (suit == 'c' or suit == 'd') else 30
	bid = int(bid[0], base=8)	# limit 7
	
	# game score depends on doubling
	game = (bid * base + bump) * (1 << dbl)

	# add Game Bonus or Part Score
	if game < 100:	game += 50
	else:		game += 500 if vul else 300

	# undoubled overtricks are base value
	#   doubled overtricks are 100, 200 if vul
	# redoubled overtricks are 200, 400 if vul

	if dbl:		over *= 50 << (dbl + vul)
	else:		over *= base

	insult = 50 * dbl		# Making Doubled Contract
	game += over + insult

	# slam bonuses are Additional
	if bid == 6:	game +=  750 if vul else  500
	if bid == 7:	game += 1500 if vul else 1000

	if debug:	print(out, '= %d' % game)
	return game

"""Parse Scoring String: #S+#VD"""
"""Parse Scoring String: #S-#VD"""
"""Parse Scoring String:   -#VD"""

def	num(x):	return int(x, base=14)

def	score(line):

	"""Parse Context"""
	line += '.'
	vul = 'v' in line
	red = 'r' in line
	dbl = 'x' in line or 'd' in line[2:]
	if red: dbl = 2

	"""Win or Lose"""
	skor = 9999
	bid = line[0:2]

#        1         2         3         4         5         6         7         8
#2345678901234567890123456789012345678901234567890123456789012345678901234567890
	if   line[0] == '-':	skor = down(None, num(line[1]), vul, dbl)
	elif line[2] == '-':	skor = down(bid,  num(line[3]), vul, dbl)
	elif line[2] == '+':	skor = made(bid,  num(line[3]), vul, dbl)
	elif line[2] == '.':	skor = made(bid,  0,		vul, dbl)
	elif line[2] == '=':
		diff = num(line[3]) - num(line[0])
		if diff < 0:	skor = down(bid, -diff, vul, dbl)
		else:		skor = made(bid,  diff, vul, dbl)
	#lse: print('WTF?')
	else:			skor = made(bid,  0,            vul, dbl)
	if debug:	print(line + ": %d" % skor)
	return skor

all7 = range(1,8)

def main():
	for bid in all7:
		arg = '%d%s' % (bid, 'c.')
		print('%s = %d' % (arg, score(arg)), end='\t')

def old_main():
	"""Loop Over Input"""
	line = input()
	while line:
		print(line, '= %d' % score(line))
		line = input()

if __name__ == '__main__':	old_main()
