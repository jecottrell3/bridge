#! /bin/python3
from __future__ import print_function
from sys import *
debug = 0

"""parse scoring string: #s+#vd

example: 3n+1nr		3 notrump making 4, non-Vulnerable, ReDoubled
example: 4s-1vu		4 spades, down 1, vulnerable, Undoubled
example: 2d=6nd		2 diamonds, six tricks. Down Two
quick:	-1		1 down
quick:	2hx		2 hearts doubled

NOTE: Numbers greater that Ten are in HEX. After -9 comes -A!
The first two characters are the contract. The next two can be '+' or '-',
meaning overtricks or undertricks. Use '=' for 'making' and '@' for
Absolute Number of Tricks.

The letters 'd', 'r', and 'v' can be added to specify Doubled,
Redoubled, and/or Vulnernable. Default is Undoubled Non-Vulnerable.

Some Examples:

1c	One Club. Same as the next four.
1c=1	One Club, Making One.
1c+0	One Club, Zero  Overtricks.
1c-0	One Club, Zero Undertricks.
1c@7	One Club, Taking Seven.

1c-1	One Club, One Undertrick
1c=0	One Club, Making Zero.
1c@6	One Club, Taking Six.
-1	Down One. Contract Irrelevant.

1n+6rv	One Notrump, Taking All, Redoubled Vulnerable. 3160 Highest!
7n=7rv	Grand Slam. Not Quite as Good. Only 2980.

NOTE: V and D (or r for redouble) are flags; N or U never appear.

The contract may be omitted when scoring undertricks.
"""
#################################################################

def	down(bid, undr, vul, dbl):
	if 0: print('Down ', bid, undr, vul, dbl)

	# undoubled tricks are 50, 100 if vul
	#   doubled tricks follow two schedules

	if not dbl:	ouch = undr * (100 if vul else 50)
	elif vul:	ouch = undr * 300 - 100	# 200, 500, 800...
	elif undr < 3:	ouch = undr * 200 - 100 # 100, 300
	else:		ouch = undr * 300 - 400 # 500, 800...

	if dbl == 2:	ouch *= 2	# Redouble All Penalties
	return -ouch

#################################################################

def	made(bid, over, vul, dbl):
	if 0: print('Made ', bid, over, vul, dbl)

	# part score, game score, insult

	suit = bid[1]
	bump = 10 if  suit == 'n' else 0
	base = 20 if (suit == 'c' or suit == 'd') else 30
	bid = int(bid[0], base=8)	# limit 7
	
	# game score depends on doubling
	game = (bid * base + bump) * (1 << dbl)

	# add game bonus or part score
	if game ==  0:	return 0
	if game < 100:	game += 50
	else:		game += 500 if vul else 300

	# undoubled overtricks are base value
	#   doubled overtricks are 100, 200 if vul
	# redoubled overtricks are 200, 400 if vul

	if dbl:		over *= 50 << (dbl + vul)
	else:		over *= base

	insult = 50 * dbl		# making Doubled Contract
	game += over + insult

	# slam bonuses are additional
	if bid == 6:	game +=  750 if vul else  500
	if bid == 7:	game += 1500 if vul else 1000

	return game

#################################################################
"""parse scoring string: #s+#vx"""
"""parse scoring string: #s-#vx"""
"""parse scoring string:   -#vx"""
#################################################################

def	score(line):

	"""parse context"""

	if line[0] == '-':	line = '0z' + line	# fake bid
	else:			line += '.'		# padding

	vul = 'v' in line
	red = 'r' in line
	dbl = 'x' in line or 'd' in line[2:]
	if red: dbl = 2

	"""contract"""

	bid  = line[0:2]
	need = int(line[0])
	suit =     line[1]
	sign =     line[2]

	"""reults"""

	if   sign == '-':	xtra = int(line[2:4], base=14)	# undertrix
	elif sign == '+':	xtra = int(line[2:4])		# overtrix
	elif sign == '=':	xtra = int(line[3]) - need	# making
	elif sign == '@':	xtra = int(line[3]) - need - 6	# absolute
	else:			xtra = 0

	"""win or lose"""

	if xtra < 0:	return down(bid, - xtra, vul, dbl)
	else:		return made(bid, + xtra, vul, dbl)

#################################################################
####	Generate the ACBL Scoring Table
#################################################################

all7 = '1234567'

def dash():	print('-' * 74)

def table():
	dash()
	for down in all7 + '89ABCD':
		for tail in ('', 'x', 'r', 'v', 'xv', 'rv'):
			if not tail: print('', end='|')
			arg = '-' + down + tail
			print(' %s%6d' % (arg, score(arg)), end=' |')
		print()
	dash()
	for bid in all7:
		for suit in 'csn':
			for took in all7:
				if took < bid: continue
				for tail in ('', 'x', 'r', 'v', 'xv', 'rv'):
					if not tail: print('', end='|')
					arg = bid + suit + took + tail
					print(' %s%5d' % (arg, score(arg)), end=' |')
				print()
			dash()

#################################################################

args = argv[1:]
def main():
	"""args are contracts"""
	if not args: table(); exit()
	for line in args:
		print(line, '= %d' % score(line))

#################################################################
if __name__ == '__main__':	main()
